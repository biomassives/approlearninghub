<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Track Audio Player & Recorder</title>
    <style>

     body {
            font-family: sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .audio-player-container {
            background-color: #fff;
            padding: 20px 30px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px; /* Adjust as needed */
            box-sizing: border-box;
        }
        h2 {
            font-size: 1.2em;
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis; /* Add ellipsis if title is too long */
        }
        #currentTrackTitle {
            font-weight: normal;
            color: #555;
        }
        .track-selection {
            margin-bottom: 20px;
        }
        .track-selection label {
            margin-right: 10px;
            font-weight: bold;
        }
        .track-selection select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            min-width: 200px;
        }
        .controls {
            display: grid;
            grid-template-columns: auto 1fr auto; /* Play/Pause | Progress/Time | Volume */
            align-items: center;
            gap: 15px; /* Spacing between elements */
            margin-top: 15px;
        }

        #playPauseBtn {
            padding: 10px 15px;
            font-size: 1.2em;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s ease;
            min-width: 80px; /* Ensure consistent width */
            text-align: center;
        }
        #playPauseBtn:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #playPauseBtn:hover:not(:disabled) {
            background-color: #0056b3;
        }
        .time-display {
            font-size: 0.9em;
            color: #555;
            text-align: center; /* Center time below progress */
            grid-column: 2; /* Place in the middle column */
            grid-row: 2; /* Place below the progress bar */
        }
        .progress-control {
            grid-column: 2; /* Place in the middle column */
            grid-row: 1; /* Place above the time */
            display: flex; /* Needed for the label/input pattern if label visible */
            align-items: center;
            width: 100%;
        }
        #progressBar {
            width: 100%; /* Take full width of its container */
            cursor: pointer;
            height: 8px;
            appearance: none; /* Override default look */
            background: #e0e0e0;
            border-radius: 5px;
            outline: none;
        }
        /* Style the thumb (the slider handle) */
        #progressBar::-webkit-slider-thumb {
        appearance: none;
        width: 16px;
        height: 16px;
        background: #007bff;
        border-radius: 50%;
        cursor: pointer;
        }
        #progressBar::-moz-range-thumb {
        width: 16px;
        height: 16px;
        background: #007bff;
        border-radius: 50%;
        cursor: pointer;
        border: none; /* Remove default border in Firefox */
        }
        #progressBar:disabled {
            cursor: not-allowed;
            background: #f0f0f0;
        }
        #progressBar:disabled::-webkit-slider-thumb {
        background: #cccccc;
        }
        #progressBar:disabled::-moz-range-thumb {
        background: #cccccc;
        }
        .volume-control {
            display: flex;
            align-items: center;
            grid-column: 3; /* Place in the right column */
            grid-row: 1 / span 2; /* Span both rows */
        }
        .volume-control label {
            margin-right: 5px;
            cursor: default; /* Or make it a mute toggle button */
        }
        #volumeControl {
            width: 80px; /* Adjust as needed */
            cursor: pointer;
            height: 5px;
            appearance: none;
            background: #e0e0e0;
            border-radius: 3px;
        }
        #volumeControl::-webkit-slider-thumb {
        appearance: none;
        width: 12px;
        height: 12px;
        background: #007bff;
        border-radius: 50%;
        cursor: pointer;
        }
        #volumeControl::-moz-range-thumb {
        width: 12px;
        height: 12px;
        background: #007bff;
        border-radius: 50%;
        cursor: pointer;
        border: none;
        }
        /* Basic accessibility */
        .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
        }

        /* Optional download link style */
        .download-link {
            grid-column: 4; /* Add a 4th column if needed */
            grid-row: 1 / span 2;
            font-size: 1.5em;
            text-decoration: none;
            color: #007bff;
            margin-left: 10px;
        }
        .download-link:hover {
            color: #0056b3;
        }

.main-controls {
    display: grid;
    grid-template-columns: auto 1fr auto; /* Play/Pause | Progress/Time | Volume */
    align-items: center;
    gap: 15px;
    margin-top: 15px;
    margin-bottom: 15px; /* Add some space below */
}

.extra-controls {
    display: flex;
    justify-content: space-around; /* Distribute buttons */
    align-items: center;
    gap: 10px;
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px solid #eee; /* Separator line */
}

.extra-controls button {
    padding: 8px 12px;
    font-size: 0.9em;
    background-color: #6c757d; /* Greyish color */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.extra-controls button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.extra-controls button:hover:not(:disabled) {
    background-color: #5a6268;
}

#recordBtn {
    background-color: #dc3545; /* Red for record */
}
#recordBtn:hover:not(:disabled) {
    background-color: #c82333;
}

#stopRecordBtn {
   /* Keep default grey or slightly different */
}

#translateBtn {
   background-color: #17a2b8; /* Teal/Info color */
}
#translateBtn:hover:not(:disabled) {
   background-color: #138496;
}


.status-indicator {
    font-size: 0.9em;
    color: #dc3545; /* Red color for recording status */
    min-width: 80px; /* Reserve some space */
    text-align: center;
    font-weight: bold;
}


/* ... (rest of previous styles) ... */
  </style>
</head>
<body>

<div class="audio-player-container">
    <h2>Now Playing: <span id="currentTrackTitle">Select a track</span></h2>

    <div class="track-selection">
        <label for="trackSelect">Select Track:</label>
        <select id="trackSelect">
            <option value="">-- Select --</option>
            </select>
    </div>

    <audio id="audioElement" preload="metadata"></audio>

    <div class="controls main-controls"> <button id="playPauseBtn" disabled>‚ñ∂ Play</button>

        <div class="time-display">
            <span id="currentTime">0:00</span> / <span id="duration">0:00</span>
        </div>

        <div class="progress-control">
             <label for="progressBar" class="sr-only">Seek</label>
            <input type="range" id="progressBar" value="0" min="0" max="100" step="any" disabled>
        </div>

        <div class="volume-control">
            <label for="volumeControl">üîä</label>
            <input type="range" id="volumeControl" value="1" min="0" max="1" step="0.01">
        </div>
    </div>

    <div class="controls extra-controls">
        <button id="recordBtn">üé§ Record</button>
        <button id="stopRecordBtn" disabled>‚ñ† Stop Rec</button>
        <span id="recordingStatus" class="status-indicator"></span>
        <button id="translateBtn" disabled>üåê Translate</button> </div>

</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    // --- Configuration ---
    let tracks = [ // Use 'let' because we will add recordings to it
        { title: "Fuel Briquette AR", filePath: "/assets/mp3/approvideo_fuel-briquette-ar.mp3", isRecording: false },
        { title: "Another Example Track", filePath: "/assets/mp3/another-track.mp3", isRecording: false },
        { title: "Short Test Sound", filePath: "/assets/mp3/short-sound.mp3", isRecording: false },
    ];
    let recordingCounter = 0;

    // --- Get DOM Elements ---
    const audioElement = document.getElementById('audioElement');
    const trackSelect = document.getElementById('trackSelect');
    const currentTrackTitle = document.getElementById('currentTrackTitle');
    const playPauseBtn = document.getElementById('playPauseBtn');
    const progressBar = document.getElementById('progressBar');
    const currentTimeDisplay = document.getElementById('currentTime');
    const durationDisplay = document.getElementById('duration');
    const volumeControl = document.getElementById('volumeControl');
    // New Elements
    const recordBtn = document.getElementById('recordBtn');
    const stopRecordBtn = document.getElementById('stopRecordBtn');
    const recordingStatus = document.getElementById('recordingStatus');
    const translateBtn = document.getElementById('translateBtn');

    // --- State Variables ---
    let isPlaying = false;
    let currentTrackIndex = -1; // No track selected initially
    let isRecording = false;
    let mediaRecorder;
    let audioChunks = [];
    let mediaStream = null; // To keep track of the microphone stream

    // --- Functions ---

    function formatTime(seconds) {
        // Handle potential NaN or Infinity input
        if (!isFinite(seconds)) {
            return '0:00';
        }
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
    }

    function updateProgress() {
        if (audioElement.duration && isFinite(audioElement.duration)) {
            const progressPercent = (audioElement.currentTime / audioElement.duration) * 100;
            progressBar.value = audioElement.currentTime;
            currentTimeDisplay.textContent = formatTime(audioElement.currentTime);
        } else {
            progressBar.value = 0;
            currentTimeDisplay.textContent = formatTime(0);
        }
    }

    function setPlayButtonState(play) {
        if (play) {
            playPauseBtn.textContent = '‚ùö‚ùö Pause';
            isPlaying = true;
        } else {
            playPauseBtn.textContent = '‚ñ∂ Play';
            isPlaying = false;
        }
        // Disable translate button while playing
        translateBtn.disabled = play || currentTrackIndex === -1 || isRecording;
    }

    function addTrackOption(track, index) {
        const option = document.createElement('option');
        option.value = index.toString();
        option.textContent = track.title;
        trackSelect.appendChild(option);
    }

     function populateTrackList() {
        // Clear existing options except the first placeholder
        while (trackSelect.options.length > 1) {
            trackSelect.remove(1);
        }
        tracks.forEach(addTrackOption);
    }

    function loadTrack(index) {
        if (isRecording) {
            console.warn("Cannot load track while recording.");
            trackSelect.value = currentTrackIndex.toString(); // Revert selection
            return;
        }
        if (index < 0 || index >= tracks.length) {
            console.log("Invalid track index or selection reset:", index);
            audioElement.src = "";
            currentTrackTitle.textContent = "Select a track";
            durationDisplay.textContent = formatTime(0);
            currentTimeDisplay.textContent = formatTime(0);
            progressBar.value = 0;
            progressBar.max = 1;
            progressBar.disabled = true;
            playPauseBtn.disabled = true;
            translateBtn.disabled = true; // Disable translate if no track
            setPlayButtonState(false);
            currentTrackIndex = -1;
            return;
        }

        const track = tracks[index];
        console.log(`Loading track index ${index}:`, track);
        currentTrackIndex = index; // Update the current index BEFORE setting src

        // If it's a recording (Blob URL), create/recreate it if needed?
        // No, Blob URL should persist for the session.
        audioElement.src = track.filePath; // Works for both file paths and Blob URLs

        currentTrackTitle.textContent = track.title;
        durationDisplay.textContent = formatTime(0);
        currentTimeDisplay.textContent = formatTime(0);
        progressBar.value = 0;
        progressBar.max = 1;
        playPauseBtn.disabled = false;
        progressBar.disabled = true; // Disable until metadata loads

        setPlayButtonState(false); // Reset play state
        if(audioElement.readyState > 0) { // If there was a previous track playing
           audioElement.pause(); // Ensure it's paused
           audioElement.currentTime = 0; // Go to start
        }

        audioElement.volume = volumeControl.value;

        // Enable Translate button only if it's a valid track
        translateBtn.disabled = false;

        // Load the audio. Often implicit with src change, but sometimes helps.
        audioElement.load();
        console.log(`Attempting to load: ${track.filePath}`);
    }

    function updateRecordingUI(recordingActive) {
        isRecording = recordingActive;
        recordBtn.disabled = recordingActive;
        stopRecordBtn.disabled = !recordingActive;
        recordingStatus.textContent = recordingActive ? "Recording..." : "";
        // Disable playback/track selection during recording
        playPauseBtn.disabled = recordingActive || currentTrackIndex === -1;
        trackSelect.disabled = recordingActive;
        progressBar.disabled = recordingActive || currentTrackIndex === -1;
        // Also disable translate while recording
        translateBtn.disabled = recordingActive || currentTrackIndex === -1 || isPlaying;
    }

    async function startRecording() {
        if (isRecording) return;

        try {
            // Request microphone access
            mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });

            // Stop any currently playing track
            if (isPlaying) {
                 audioElement.pause();
                 setPlayButtonState(false);
            }

            // --- Safely create MediaRecorder ---
            // Check supported MIME types
            const options = getSupportedMimeTypeOptions();
            console.log("Using options for MediaRecorder:", options);

            mediaRecorder = new MediaRecorder(mediaStream, options);

            audioChunks = []; // Clear previous chunks

            // --- Event Handlers for MediaRecorder ---
            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    console.log(`Data available: ${event.data.size} bytes`);
                    audioChunks.push(event.data);
                } else {
                    console.log("Data available event with empty data chunk.");
                }
            };

            mediaRecorder.onstop = () => {
                console.log("MediaRecorder stopped.");
                // Stop the microphone track(s) to turn off browser indicator
                if (mediaStream) {
                    mediaStream.getTracks().forEach(track => track.stop());
                    mediaStream = null; // Release the stream reference
                }

                 if (audioChunks.length === 0) {
                     console.warn("No audio chunks recorded.");
                     recordingStatus.textContent = "Rec failed";
                     updateRecordingUI(false); // Reset UI
                     return;
                 }


                // Determine MIME type based on what was used
                const recordedMimeType = mediaRecorder.mimeType || options.mimeType || 'audio/webm'; // Fallback needed?
                console.log("Processing recorded data with MIME type:", recordedMimeType);


                // Combine chunks into a Blob
                const audioBlob = new Blob(audioChunks, { type: recordedMimeType });
                 // Check blob size
                if (audioBlob.size === 0) {
                     console.error("Created Blob has size 0. Recording might have failed silently.");
                      recordingStatus.textContent = "Rec failed (empty)";
                      updateRecordingUI(false); // Reset UI
                     return; // Don't add an empty track
                 }

                const audioUrl = URL.createObjectURL(audioBlob);
                recordingCounter++;
                const newTrack = {
                    title: `Recording ${recordingCounter}`,
                    filePath: audioUrl, // Use the Blob URL
                    isRecording: true, // Mark as a recording
                    blob: audioBlob // Store blob if needed later (e.g., for upload/translate)
                };

                console.log(`Recording finished. Blob size: ${audioBlob.size}, URL: ${audioUrl}`);

                // Add to tracks array and update dropdown
                tracks.push(newTrack);
                addTrackOption(newTrack, tracks.length - 1);

                // Select the new recording
                trackSelect.value = (tracks.length - 1).toString();
                loadTrack(tracks.length - 1); // Load the new recording

                recordingStatus.textContent = "Rec Saved";
                updateRecordingUI(false); // Update UI state AFTER processing

                 // Clear chunks for next recording
                 audioChunks = [];
            };

             mediaRecorder.onerror = (event) => {
                console.error("MediaRecorder Error:", event.error);
                recordingStatus.textContent = `Rec Error: ${event.error.name}`;
                 // Stop the microphone track(s)
                if (mediaStream) {
                    mediaStream.getTracks().forEach(track => track.stop());
                    mediaStream = null;
                }
                 updateRecordingUI(false);
                 audioChunks = []; // Clear any partial chunks
            };


            // --- Start recording ---
            mediaRecorder.start();
            console.log("MediaRecorder started. State:", mediaRecorder.state);
            updateRecordingUI(true);

        } catch (err) {
            console.error("Error accessing microphone or starting recording:", err);
            recordingStatus.textContent = "Mic Access Error";
            alert(`Could not access microphone: ${err.message}\nPlease ensure permission is granted.`);
            updateRecordingUI(false); // Ensure UI resets if start fails
        }
    }

    function stopRecording() {
        if (!isRecording || !mediaRecorder || mediaRecorder.state !== "recording") {
             console.warn("Stop recording called but not in a recording state.");
             // Attempt to stop tracks and reset UI anyway if something went wrong
              if (mediaStream) {
                mediaStream.getTracks().forEach(track => track.stop());
                mediaStream = null;
              }
              updateRecordingUI(false);
              return;
        };

        recordingStatus.textContent = "Processing..."; // Indicate processing
        mediaRecorder.stop(); // This will trigger the 'onstop' event handler
        console.log("Stop recording requested. State:", mediaRecorder.state);
         // UI update (disabling stop button etc.) happens partly now, partly in onstop
         stopRecordBtn.disabled = true; // Disable immediately
    }

    // Helper function to check for supported MIME types
    function getSupportedMimeTypeOptions() {
        const typesToCheck = [
            'audio/webm;codecs=opus', // Preferred by Chrome/Firefox
            'audio/ogg;codecs=opus',
            'audio/webm',
            'audio/ogg',
             'audio/mp4', // Sometimes supported (check codecs if needed)
            // 'audio/wav' // Often not directly supported by MediaRecorder
        ];
        for (const type of typesToCheck) {
            if (MediaRecorder.isTypeSupported(type)) {
                console.log(`Supported MIME type found: ${type}`);
                return { mimeType: type }; // Return the first supported type
            }
        }
        console.warn("No preferred MIME type supported, using browser default.");
        return {}; // Let the browser decide (usually webm/opus or similar)
    }


    // --- Event Listeners ---

    trackSelect.addEventListener('change', (e) => {
        const selectedIndex = parseInt(e.target.value, 10);
        if (!isNaN(selectedIndex)) {
             loadTrack(selectedIndex);
        } else {
            loadTrack(-1); // Handle "-- Select --"
        }
    });

    playPauseBtn.addEventListener('click', () => {
        if (currentTrackIndex === -1 || isRecording) return;

        if (isPlaying) {
            audioElement.pause();
        } else {
            // Check if starting from end, restart if so
            if (audioElement.currentTime >= audioElement.duration - 0.1 && isFinite(audioElement.duration)) {
                audioElement.currentTime = 0;
            }
            audioElement.play().catch(error => {
                 console.error("Playback failed:", error);
                 alert(`Playback could not be started: ${error.message}`);
                 setPlayButtonState(false);
                 translateBtn.disabled = true; // Disable translate on playback error
            });
        }
        setPlayButtonState(!isPlaying);
    });

    audioElement.addEventListener('loadedmetadata', () => {
        if (isFinite(audioElement.duration)) {
            console.log(`Metadata loaded. Duration: ${audioElement.duration}`);
            durationDisplay.textContent = formatTime(audioElement.duration);
            progressBar.max = audioElement.duration;
            progressBar.disabled = isRecording; // Keep disabled if recording
        } else {
            console.warn("Duration is not finite.");
            durationDisplay.textContent = "N/A";
            progressBar.max = 1;
            progressBar.value = 0;
            progressBar.disabled = true; // Definitely disable if duration unusable
            playPauseBtn.disabled = true; // Also disable play
            translateBtn.disabled = true; // Also disable translate
        }
         // Ensure progress updates correctly if metadata loads *after* initial value set
        updateProgress();
    });

     audioElement.addEventListener('error', (e) => {
        console.error("Audio Element Error:", audioElement.error);
         let errorMessage = `An error occurred loading/playing the audio (Code: ${audioElement.error?.code}).`;
         // Attempt to provide more specific messages if possible
         if (audioElement.error) {
             switch (audioElement.error.code) {
                case MediaError.MEDIA_ERR_ABORTED: errorMessage = "Audio playback aborted."; break;
                case MediaError.MEDIA_ERR_NETWORK: errorMessage = "Network error loading audio."; break;
                case MediaError.MEDIA_ERR_DECODE: errorMessage = "Audio decoding error."; break;
                case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED: errorMessage = "Audio format not supported or source error."; break;
             }
         }
         currentTrackTitle.textContent = `Error loading track`;
         alert(errorMessage);
         durationDisplay.textContent = formatTime(0);
         currentTimeDisplay.textContent = formatTime(0);
         progressBar.value = 0;
         progressBar.max = 1;
         progressBar.disabled = true;
         playPauseBtn.disabled = true;
         translateBtn.disabled = true; // Disable on error
         setPlayButtonState(false);
    });


    audioElement.addEventListener('timeupdate', updateProgress);

    audioElement.addEventListener('ended', () => {
        console.log("Audio ended");
        setPlayButtonState(false);
        // Optional: Auto-play next logic could go here
    });

    progressBar.addEventListener('input', () => {
        if (isFinite(audioElement.duration) && !isRecording) {
            audioElement.currentTime = progressBar.value;
            currentTimeDisplay.textContent = formatTime(audioElement.currentTime);
        }
    });

    volumeControl.addEventListener('input', (e) => {
        audioElement.volume = e.target.value;
    });

    // --- Recording Button Listeners ---
    recordBtn.addEventListener('click', startRecording);
    stopRecordBtn.addEventListener('click', stopRecording);

    // --- Translate Button Listener (Placeholder) ---
    translateBtn.addEventListener('click', () => {
        if (currentTrackIndex === -1 || isRecording || isPlaying) {
             console.warn("Translate called in invalid state.");
             return; // Should be disabled anyway, but double-check
        }

        const currentTrack = tracks[currentTrackIndex];
        console.log("Translate button clicked for track:", currentTrack.title);
        alert("Translation API integration not yet implemented.\n\nReady to send audio data for translation.");

        // --- Next Steps for Translation ---
        // 1. Get the audio data:
        //    - If it's an original track (currentTrack.isRecording === false):
        //      You might need to fetch the audio file again using fetch(currentTrack.filePath)
        //      and get the response as a Blob or ArrayBuffer.
        //    - If it's a recording (currentTrack.isRecording === true):
        //      Use the stored blob: `const audioBlob = currentTrack.blob;`
        //
        // 2. Choose a Translation Service API:
        //    - Google Cloud Speech-to-Text + Translation API
        //    - AWS Transcribe + Translate
        //    - Azure Speech Services (includes translation)
        //    - AssemblyAI (Speech-to-Text, then use separate translation)
        //    - OpenAI Whisper (Speech-to-Text, then use separate translation)
        //
        // 3. Prepare the API Request:
        //    - Many APIs accept audio data directly (often base64 encoded or as multipart/form-data).
        //    - You'll need API keys and potentially SDKs or direct HTTP requests.
        //    - Specify source language (or auto-detect) and target language.
        //
        // 4. Send Request & Handle Response:
        //    - Use `Workspace` or an SDK to send the audio data to the API endpoint.
        //    - Handle authentication (API keys).
        //    - Process the response, which will typically contain the transcribed text and/or the translated text.
        //
        // 5. Display the Result:
        //    - Show the transcription/translation in a new element on the page (e.g., a modal, a dedicated text area).

        // Example placeholder for getting the blob (if it's a recording)
        if (currentTrack.isRecording && currentTrack.blob) {
            console.log("Audio Blob available for translation:", currentTrack.blob);
            // You would now send 'currentTrack.blob' to the chosen API
        } else if (!currentTrack.isRecording) {
             console.log("Need to fetch original audio file for translation:", currentTrack.filePath);
             // Add fetch logic here if needed for original files
        } else {
            console.error("Could not get audio data for translation.");
            alert("Error: Could not retrieve audio data for translation.");
        }
    });


    // --- Initialization ---
    populateTrackList();
    audioElement.volume = volumeControl.value;
    playPauseBtn.disabled = true;
    progressBar.disabled = true;
    translateBtn.disabled = true; // Initially disabled

    // Initial UI state for recording buttons
    updateRecordingUI(false);

}); // End DOMContentLoaded

    
    </script>

</body>
</html>
