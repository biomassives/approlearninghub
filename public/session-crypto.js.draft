// Main JavaScript file for ApproVideo
// Import from the simplified session crypto module
import { loadSecureSession, saveSecureSession, clearSecureSession } from './simplified-session-crypto.js';

// DOM references
const searchInput = document.getElementById('searchInput');
const sortSelect = document.getElementById('sortSelect');
const videoGrid = document.getElementById('videoGrid');
const skeletonLoader = document.getElementById('skeletonLoader');
const infiniteScrollTrigger = document.getElementById('infiniteScrollTrigger');

// Global state
let currentCategory = '';
let currentPage = 1;
let isLoading = false;
let hasMoreContent = true;

// Configuration
const API_BASE_URL = '/api'; // Set to relative path
const ITEMS_PER_PAGE = 12;

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
  // Set up event listeners first (these don't depend on session)
  setupEventListeners();
  
  // Load initial content (doesn't depend on session)
  loadFeaturedContent();
  
  // Initialize session in a safe way that won't block other functionality
  safelyInitializeSession();
});

// Safe session initialization that won't break other features if it fails
function safelyInitializeSession() {
  try {
    // Use a simple localStorage check first for guest users
    const userRole = localStorage.getItem('user_role') || 'guest';
    const userEmail = localStorage.getItem('user_email') || 'unknown@example.com';
    
    // Update UI immediately with the basic info
    updateUIForUser({ role: userRole, email: userEmail });
    
    // Then try to load the secure session in the background
    loadSecureSession().then(session => {
      if (session) {
        // Save basic info to localStorage for faster loading next time
        localStorage.setItem('user_role', session.role || 'guest');
        localStorage.setItem('user_email', session.email || 'unknown@example.com');
        
        // Update UI with complete session data
        updateUIForUser(session);
      }
    }).catch(error => {
      console.warn('Secure session load failed, using basic session:', error);
    });
  } catch (error) {
    console.error('Session initialization error:', error);
    // Fallback to treating user as not logged in
    updateUIForUser({ role: 'guest', email: 'unknown@example.com' });
  }
}

// Set up all event listeners
function setupEventListeners() {
  // Search functionality
  if (searchInput) {
    searchInput.addEventListener('input', debounce(handleSearch, 500));
  }
  
  // Sorting functionality
  if (sortSelect) {
    sortSelect.addEventListener('change', handleSort);
  }
  
  // Category navigation
  document.querySelectorAll('.main-category-icon').forEach(icon => {
    icon.addEventListener('click', handleCategoryClick);
  });
  
  // Infinite scroll
  if (infiniteScrollTrigger) {
    const observer = new IntersectionObserver(handleInfiniteScroll, {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    });
    
    observer.observe(infiniteScrollTrigger);
  }
}

// The rest of your index.js code remains unchanged...
