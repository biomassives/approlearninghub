// api/auth.js
const express = require('express');
const router = express.Router();

const {
  handleSignup,
  handleLogin,
  handleLogout,
  handleAccessCheck,
  handleUpdateLattice,
  handleUserData,
  handleUserRole,
  handleVerify,
  handleVerifyLattice
} = require('../lib/authHandlers');
const { requireAuth } = require('../lib/authMiddleware');

// ── Public endpoints ──────────────────────────────────────────

// Create a new user
// POST /api/auth/signup
router.post('/signup', handleSignup);

// Log in (returns lattice + hash + session)
// POST /api/auth/login
router.post('/login', handleLogin);

// Quick check to see if a token is still valid
// GET /api/auth/access-check
router.get('/access-check', handleAccessCheck);

// ── All routes below require authentication ────────────────────
router.use(requireAuth);

// One‑time verify of a lattice
// POST /api/auth/verify
router.post('/verify', handleVerify);

router.post('/verify-lattice', handleVerifyLattice);


// Invalidate session & clear lattice
// POST /api/auth/logout
router.post('/logout', handleLogout);

// Generate & store a new lattice for the logged‑in user
// POST /api/auth/update-lattice
router.post('/update-lattice', handleUpdateLattice);

// Fetch your own user & profile data
// GET /api/auth/user
router.get('/user', handleUserData);

// Get or set roles (admins only)
// GET  /api/auth/user-role?userId=xyz
// POST /api/auth/user-role   { userId, role }
router.get('/user-role', handleUserRole);
router.post('/user-role', handleUserRole);

module.exports = router;
